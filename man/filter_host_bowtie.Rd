% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_host.R
\name{filter_host_bowtie}
\alias{filter_host_bowtie}
\title{Align reads against one or more filter libraries and subsequently
remove mapped reads}
\usage{
filter_host_bowtie(
  reads_bam,
  lib_dir,
  libs,
  output = paste(tools::file_path_sans_ext(reads_bam), "filtered", "bam", sep = "."),
  output_rds = paste(tools::file_path_sans_ext(reads_bam), "filtered", "rds", sep =
    "."),
  bowtie2_options = NULL,
  YS = 1e+06,
  threads = 8,
  overwrite = FALSE
)
}
\arguments{
\item{reads_bam}{The name of a merged, sorted .bam file that has previously
been aligned to a reference library. Likely, the output from running an
instance of \code{align_target_bowtie()}.}

\item{lib_dir}{Path to the directory that contains the filter Bowtie2 index
files.}

\item{libs}{The basename of the filter libraries
(without .bt2 or .bt2l extension)}

\item{output}{The desired name of the output .bam file. Default is
the basename of \code{unfiltered_bam} + \code{.filtered.bam}.}

\item{output_rds}{The desired name of the output .rds file. Default is
the basename of \code{unfiltered_bam} + \code{.filtered.rds}.}

\item{bowtie2_options}{Optional: Additional parameters that can be passed to
the filter_host_bowtie() function. To see all the available parameters
use Rbowtie2::bowtie2_usage(). Default parameters are the parameters are the
default parameters that PathoScope 2.0 uses. NOTE: Users should pass all their
parameters as one string and if optional parameters are given then the user
is responsible for entering all the parameters to be used by Bowtie2. NOTE:
The only parameters that should NOT be specified here is the threads.}

\item{YS}{yieldSize, an integer. The number of alignments to be read in from
the bam file at once. Default is 1000000.}

\item{threads}{The amount of threads available for the function.
Default is 8 threads.}

\item{overwrite}{Whether existing files should be overwritten.
Default is FALSE.}
}
\value{
The name of a filtered, sorted .bam file written to the user's
current working directory.
}
\description{
After a sample is aligned to a target library with \code{align_target_bowtie()},
we may use \code{filter_host_bowtie()} to remove unwelcome host contamination using
filter reference libraries. This function takes as input the name of the .bam
file produced via \code{align_target_bowtie()}, and produces a
sorted .bam file with any reads that match the filter libraries removed.
This resulting .bam file may be used downstream for further analysis.
}
\examples{
#### Filter reads from bam file that align to any of the filter libraries

## Assuming a bam file has already been created with align_target_bowtie()

## Create a temporary directory to store the filter library
ref_temp <- tempfile()
dir.create(ref_temp)

## Create a temporary directory to store the filter library index files
lib_temp <- tempfile()
dir.create(lib_temp)

## Create a temporary directory to store the filtered bam file
align_temp <- tempfile()
dir.create(align_temp)

## Create object with path to previously created bam file
bamPath <- system.file("extdata", "bowtie_target.bam", package = "MetaScope")

## Create object with path to the filter library
refPath <- system.file("extdata","filter.fasta", package = "MetaScope")

## Move the filter library to the temporary reference directory
file.copy(from = refPath, to = file.path(ref_temp, "filter.fasta"))

## Create the bowtie index files in the temporary index directory
mk_bowtie_index(ref_dir = ref_temp, lib_dir = lib_temp, lib_name = "filter",
overwrite=FALSE)

## Filter reads from the bam file that align to the filter library
filter_host_bowtie(reads_bam = bamPath, lib_dir = lib_temp, libs = "filter")

}
